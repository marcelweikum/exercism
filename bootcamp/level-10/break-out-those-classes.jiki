// TODO: Add your code here!
class Game do
  private property ball
  private property paddle
  private property blocks

  constructor do
    set this.ball to new Ball()
    set this.paddle to new Paddle()
    set this.blocks to []
  end

  public method add_block_row with count, width, height, y do
    set x to 5
    repeat count times do
      change this.blocks to push(this.blocks, new Block(x, y, width, height))
      change x to x + width + 1
    end
  end

  public method move_ball do
    if (this.ball.get_y() >= 100) do
      game_over("lose")
    end

    if (this.ball.get_x_velocity() > 0) do
      this.ball.set_x(1)
    else do
      this.ball.set_x(-1)
    end

    if (this.ball.get_y_velocity() > 0) do
      this.ball.set_y(1)
    else do
      this.ball.set_y(-1)
    end
  end

  public method move_paddle do
  set paddle_center to this.paddle.get_left() + 10
  set ball_x to this.ball.get_x()
  
  if (this.ball.get_y_velocity() > 0) do
    // ball down
    if (ball_x < paddle_center and this.paddle.get_left() > 0) do
      this.paddle.set_left(-1)
    else if (ball_x > paddle_center and this.paddle.get_right() < 100) do
      this.paddle.set_left(1)
    end
  else do
    // ball up
    if (paddle_center < 50 and this.paddle.get_right() < 100) do
      this.paddle.set_left(1)
    else if (paddle_center > 50 and this.paddle.get_left() > 0) do
      this.paddle.set_left(-1)
    end
  end
end

  public method handle_wall_collision do
    // horizontally
    if (this.ball.get_x() - 2 == 0 or this.ball.get_x() + 2 == 100) do
      this.ball.set_x_velocity(-this.ball.get_x_velocity())
    // vertically
    else if (this.ball.get_y() - 2 == 0 or this.ball.get_y() + 2 == 100) do
      this.ball.set_y_velocity(-this.ball.get_y_velocity())
    end
  end

  public method handle_block_collision do
    if (this.ball.get_y() + 2 >= this.blocks[1].get_top() and this.ball.get_y() - 2 <= this.blocks[1].get_bottom()) do
      for each block in this.blocks do
        if (this.ball.get_x() >= block.get_left() and this.ball.get_x() <= block.get_right()) do
          if (block.is_smashed() == false) do
            block.smash()
            this.ball.set_y_velocity(1)
          end
        end
      end
    end
  end

  public method handle_paddle_collision do
    // ball inside paddle width
    if (this.ball.get_x() >= this.paddle.get_left() and this.ball.get_x() <= this.paddle.get_right()) do
      if (this.ball.get_y() + 2 >= this.paddle.get_top()) do
        this.ball.set_y_velocity(-1)
      end
    end
  end

  public method check_finished do
    set all_smashed to true
    for each block in this.blocks do
      if (not block.is_smashed()) do
        change all_smashed to false
      end
    end
    if (all_smashed) do
      game_over("win")
    end
  end
end

class Ball do
  private property circle
  private property x_velocity
  private property y_velocity

  constructor do
    set this.x_velocity to -1
    set this.y_velocity to -1
    set this.circle to new Circle(50, 93, 2, "#ffffff")
  end

  public method set_x_velocity with xVelocity do
    change this.x_velocity to xVelocity
  end

  public method set_y_velocity with yVelocity do
    change this.y_velocity to yVelocity
  end

  public method get_x_velocity do
    return this.x_velocity
  end

  public method get_y_velocity do
    return this.y_velocity
  end

  public method get_x do
    return this.circle.cx
  end

  public method get_y do
    return this.circle.cy
  end

  public method set_x with newX do
    change this.circle.cx to this.circle.cx + newX
  end
  
  public method set_y with newY do
    change this.circle.cy to this.circle.cy + newY
  end
end

class Block do
  private property left
  private property top
  private property width
  private property height
  private property right
  private property bottom
  private property smashed
  private property roundedRectangle

  constructor with left, top, width, height do
    set this.left to left
    set this.top to top
    set this.width to width
    set this.height to height
    set this.right to this.left + this.width
    set this.bottom to this.top + this.height
    set this.smashed to false
    set this.roundedRectangle to new RoundedRectangle(this.left, this.top, this.width, this.height, 2, "#00ffff")
  end

  public method get_left do
    return this.left
  end

  public method get_right do
    return this.right
  end

  public method get_top do
    return this.top
  end

  public method get_bottom do
    return this.bottom
  end

  public method is_smashed do
    return this.smashed
  end

  public method smash do
    change this.smashed to true
    change this.roundedRectangle.opacity to 0
  end
end

class Paddle do
  private property left
  private property top
  private property width
  private property height
  private property right
  private property roundedRectangle

  constructor do
    set this.left to 40
    set this.top to 95
    set this.width to 20
    set this.height to 4
    set this.right to this.left + this.width
    set this.roundedRectangle to new RoundedRectangle(this.left, this.top, this.width, this.height, 5, "#ffffff")
  end

  public method set_left with newLeft do
    change this.roundedRectangle.left to this.left + newLeft
    change this.left to this.left + newLeft
    change this.right to this.left + this.width
  end

  public method get_left do
    return this.left
  end

  public method get_right do
    return this.right
  end

  public method get_top do
    return this.top
  end
end

// Create the game
// This should create a ball and paddle
set game to new Game()

// Add 5 blocks with a width of 17 and a height of 6 starting at a y of 28
game.add_block_row(5, 17, 6, 28)

// Play the game
repeat_until_game_over do
  // Firstly, we move things
  game.move_ball()
  game.move_paddle()

  // Now check for collisions
  game.handle_wall_collision()
  game.handle_block_collision()
  game.handle_paddle_collision()

  // Finally check for any game over scenarios
  game.check_finished()
end